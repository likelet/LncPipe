params {
    container = 'nfcore/lncpipe:dev'
    help = false
    clusterOptions = false
    species="human"// mouse , zebrafish, fly
    outdir = './Results'
    tracedir = "${params.outdir}/pipeline_info"


// input file and genome reference()
    reads = '*_{1,2}.fq.gz'
    fasta = '/data/database/hg38/genome.fa'
    design = 'design.file' // or null
    hisat2_index = '/data/database/hg38/hisatIndex/grch38_snp_tran/genome_snp_tran'
    //human gtf only
    gencode_annotation_gtf = "/data/database/hg38/Annotation/gencode.v24.annotation.gtf"
    lncipedia_gtf = "/data/database/hg38/Annotation/lncipedia_4_0_hg38.gtf" // set "null" if you are going to perform analysis on other species
// additional options for non-human species
    known_coding_gtf=""
    known_lncRNA_gtf=""


/*
 User setting options (optional)
*/

    // tools settings
    hisat_strand = 'RF'
    star_index = ''//set if star used
    bowtie2_index = ''//set if tophat used
    aligner = "hisat" // or "star","tophat"
    sam_processor="sambamba"//or "samtools(deprecated)"
    qctools ="fastp"  // or "afterqc","fastp","fastqc","none" to skip qc step
    detools = "edger"//or "deseq2"
    quant = "kallisto"// or 'htseq'

    //other settings
    singleEnd = false
    unstrand = false
    skip_combine = false
    lncRep_Output = 'reporter.html'
    lncRep_theme = 'npg'
    lncRep_cdf_percent = 10
    lncRep_max_lnc_len = 10000
    lncRep_min_expressed_sample = 50
}


// individual process setting
process.cache = 'deep'
/*
 * -------------------------------------------------
 *  nf-core/lncpipe Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs


profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  conda { process.conda = "$baseDir/environment.yml" }
  docker {
    docker.enabled = true
    process.container = params.container
  }
  singularity {
    singularity.enabled = true
    process.container = {"shub://${params.container.replace('nfcore', 'nf-core')}"}
  }

  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/nf-core/lncpipe_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nf-core/lncpipe_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nf-core/lncpipe_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/nf-core/lncpipe_dag.svg"
}

manifest {
  name = 'nf-core/lncpipe'
  author = 'Qi Zhao, Yu Sun, Zhixiang Zuo'
  homePage = 'https://github.com/nf-core/lncpipe'
  description = 'LncPipe:a Nextflow-based Long non-coding RNA analysis PIPELINE'
  nextflowVersion = '>=0.32.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
